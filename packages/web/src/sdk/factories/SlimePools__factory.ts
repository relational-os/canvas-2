/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { SlimePools, SlimePoolsInterface } from "../SlimePools";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "slimeAddress_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint32",
        name: "tokenId",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "from",
        type: "address",
      },
    ],
    name: "SlimePooled",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "tokenId",
        type: "uint32",
      },
    ],
    name: "getCoordinates",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "mostSlimed",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "tokenId",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "slimeAmount",
        type: "uint32",
      },
    ],
    name: "poolSlime",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    name: "slimePools",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405162000df538038062000df5833981810160405281019061003491906101c6565b61005061004561009760201b60201c565b61009f60201b60201c565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506101f3565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061019382610168565b9050919050565b6101a381610188565b81146101ae57600080fd5b50565b6000815190506101c08161019a565b92915050565b6000602082840312156101dc576101db610163565b5b60006101ea848285016101b1565b91505092915050565b610bf280620002036000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806394c0d8a51161005b57806394c0d8a5146100da5780639f7b9de5146100f8578063e1e1e13514610114578063f2fde38b146101455761007d565b80633a569a2914610082578063715018a6146100b25780638da5cb5b146100bc575b600080fd5b61009c60048036038101906100979190610710565b610161565b6040516100a99190610756565b60405180910390f35b6100ba610179565b005b6100c4610201565b6040516100d191906107b2565b60405180910390f35b6100e261022a565b6040516100ef91906107dc565b60405180910390f35b610112600480360381019061010d91906107f7565b610240565b005b61012e60048036038101906101299190610710565b610418565b60405161013c929190610837565b60405180910390f35b61015f600480360381019061015a919061088c565b610443565b005b60026020528060005260406000206000915090505481565b61018161053b565b73ffffffffffffffffffffffffffffffffffffffff1661019f610201565b73ffffffffffffffffffffffffffffffffffffffff16146101f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ec90610916565b60405180910390fd5b6101ff6000610543565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600360009054906101000a900463ffffffff1681565b61028c6040518060400160405280600f81526020017f706f6f6c536c696d6520257320257300000000000000000000000000000000008152508363ffffffff168363ffffffff16610607565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663beabacc833308463ffffffff166040518463ffffffff1660e01b81526004016102f193929190610936565b600060405180830381600087803b15801561030b57600080fd5b505af115801561031f573d6000803e3d6000fd5b505050508063ffffffff16600260008463ffffffff1663ffffffff1681526020019081526020016000206000828254610358919061099c565b925050819055507f4303fb09aad563ae1ffacfe557553d862645e4874e8bc918de7f9622fc3fcabd82823360405161039293929190610a2d565b60405180910390a1600260008363ffffffff1663ffffffff1681526020019081526020016000205460026000600360009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020019081526020016000205410156104145781600360006101000a81548163ffffffff021916908363ffffffff1602179055505b5050565b6000806000600861ff00851663ffffffff16901c9050600060ff851690508181935093505050915091565b61044b61053b565b73ffffffffffffffffffffffffffffffffffffffff16610469610201565b73ffffffffffffffffffffffffffffffffffffffff16146104bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b690610916565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561052f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052690610ad6565b60405180910390fd5b61053881610543565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6106a183838360405160240161061f93929190610b7e565b6040516020818303038152906040527f969cdd03000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506106a6565b505050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b600080fd5b600063ffffffff82169050919050565b6106ed816106d4565b81146106f857600080fd5b50565b60008135905061070a816106e4565b92915050565b600060208284031215610726576107256106cf565b5b6000610734848285016106fb565b91505092915050565b6000819050919050565b6107508161073d565b82525050565b600060208201905061076b6000830184610747565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061079c82610771565b9050919050565b6107ac81610791565b82525050565b60006020820190506107c760008301846107a3565b92915050565b6107d6816106d4565b82525050565b60006020820190506107f160008301846107cd565b92915050565b6000806040838503121561080e5761080d6106cf565b5b600061081c858286016106fb565b925050602061082d858286016106fb565b9150509250929050565b600060408201905061084c60008301856107cd565b61085960208301846107cd565b9392505050565b61086981610791565b811461087457600080fd5b50565b60008135905061088681610860565b92915050565b6000602082840312156108a2576108a16106cf565b5b60006108b084828501610877565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006109006020836108b9565b915061090b826108ca565b602082019050919050565b6000602082019050818103600083015261092f816108f3565b9050919050565b600060608201905061094b60008301866107a3565b61095860208301856107a3565b6109656040830184610747565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109a78261073d565b91506109b28361073d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156109e7576109e661096d565b5b828201905092915050565b6000819050919050565b6000610a17610a12610a0d846106d4565b6109f2565b61073d565b9050919050565b610a27816109fc565b82525050565b6000606082019050610a4260008301866107cd565b610a4f6020830185610a1e565b610a5c60408301846107a3565b949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610ac06026836108b9565b9150610acb82610a64565b604082019050919050565b60006020820190508181036000830152610aef81610ab3565b9050919050565b600081519050919050565b60005b83811015610b1f578082015181840152602081019050610b04565b83811115610b2e576000848401525b50505050565b6000601f19601f8301169050919050565b6000610b5082610af6565b610b5a81856108b9565b9350610b6a818560208601610b01565b610b7381610b34565b840191505092915050565b60006060820190508181036000830152610b988186610b45565b9050610ba76020830185610747565b610bb46040830184610747565b94935050505056fea2646970667358221220172e422fcf5a78208d646f697653e8a32b082549f3165f3d206ce98db4d2edf264736f6c63430008090033";

export class SlimePools__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    slimeAddress_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SlimePools> {
    return super.deploy(slimeAddress_, overrides || {}) as Promise<SlimePools>;
  }
  getDeployTransaction(
    slimeAddress_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(slimeAddress_, overrides || {});
  }
  attach(address: string): SlimePools {
    return super.attach(address) as SlimePools;
  }
  connect(signer: Signer): SlimePools__factory {
    return super.connect(signer) as SlimePools__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SlimePoolsInterface {
    return new utils.Interface(_abi) as SlimePoolsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SlimePools {
    return new Contract(address, _abi, signerOrProvider) as SlimePools;
  }
}
